name: test
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      # This is required because Github does not support conditionally required checks on branch protection rules. We will exit
      # successfully if there are no changes.
      # We have to set an output variable and check it since actions doesn't have a way to terminate early successfully.
      - name: Check for changes
        id: changes
        run: |
          current=${{ github.event.pull_request.head.sha }}
          last=${{ github.event.pull_request.base.sha }}
          if git diff --quiet $last $current -- stopwatch-manager stopwatch-manager.Tests Dockerfile; then
            echo "No changes, skipping build"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup dotnet
        if: steps.changes.outputs.changed != 'false'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'
      - name: Run tests
        if: steps.changes.outputs.changed != 'false'
        id: teststep
        continue-on-error: true
        run: |
          make test-coverage-ci
          echo "line_coverage=$(jq -r '.summary.linecoverage' TestResults/Summary.json)" >> $GITHUB_OUTPUT
          echo "branch_coverage=$(jq -r '.summary.branchcoverage' TestResults/Summary.json)" >> $GITHUB_OUTPUT
      - name: Create comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: steps.changes.outputs.changed != 'false' && steps.teststep.outcome != 'success'
        with:
          recreate: true
          message: Tests have failed. [Click here](https://github.com/tylertechgraves/stopwatch-manager/actions/runs/${{ github.run_id }}) to see test output.
      - name: Terminate on test failure
        if: steps.changes.outputs.changed != 'false' && steps.teststep.outcome != 'success'
        run: |
          echo "Tests failed, see the output of previous steps"
          exit 1
      - name: Coverage summary
        if: steps.changes.outputs.changed != 'false'
        run: |
          cat TestResults/Summary.txt
    outputs:
      line_coverage: ${{ steps.teststep.outputs.line_coverage }}
      branch_coverage: ${{ steps.teststep.outputs.branch_coverage }}
      changed: ${{ steps.changes.outputs.changed }}
  test-base:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.sha }}
      # This is required because Github does not support conditionally required checks on branch protection rules. We will exit
      # successfully if there are no changes.
      # We have to set an output variable and check it since actions doesn't have a way to terminate early successfully.
      - name: Check for changes
        id: changes
        run: |
          current=${{ github.event.pull_request.head.sha }}
          last=${{ github.event.pull_request.base.sha }}
          if git diff --quiet $last $current -- stopwatch-manager stopwatch-manager.Tests Dockerfile; then
            echo "No changes, skipping build"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup dotnet
        if: steps.changes.outputs.changed != 'false'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'
      - name: Run tests
        if: steps.changes.outputs.changed != 'false'
        id: teststep
        run: |
          make test-coverage-ci
          echo "line_coverage=$(jq -r '.summary.linecoverage' TestResults/Summary.json)" >> $GITHUB_OUTPUT
          echo "branch_coverage=$(jq -r '.summary.branchcoverage' TestResults/Summary.json)" >> $GITHUB_OUTPUT
      - name: Coverage summary
        if: steps.changes.outputs.changed != 'false'
        run: |
          cat TestResults/Summary.txt
    outputs:
      line_coverage: ${{ steps.teststep.outputs.line_coverage }}
      branch_coverage: ${{ steps.teststep.outputs.branch_coverage }}
      changed: ${{ steps.changes.outputs.changed }}
  compare-coverage:
    runs-on: ubuntu-latest
    needs: [test, test-base]
    if: ${{ needs.test.outputs.changed != 'false' && needs.test-base.outputs.changed != 'false' }}
    steps:
      - name: Compare line coverage
        id: compare-line
        run: |
          prLineCoverage=${{ needs.test.outputs.line_coverage }}
          baseLineCoverage=${{ needs.test-base.outputs.line_coverage }}
          if [ 1 -eq "$(echo "$prLineCoverage < $baseLineCoverage" | bc)" ]; then
            echo "message=Test line coverage has decreased from $baseLineCoverage% to $prLineCoverage%. Please add tests for your changes!" >> $GITHUB_OUTPUT
          elif [ 1 -eq "$(echo "$prLineCoverage > $baseLineCoverage" | bc)" ]; then
            echo "message=Test line coverage has increased from $baseLineCoverage% to $prLineCoverage%." >> $GITHUB_OUTPUT
          else
            echo "message=Test line coverage has not changed ($prLineCoverage%)." >> $GITHUB_OUTPUT
          fi
      - name: Compare branch coverage
        id: compare-branch
        run: |
          prBranchCoverage=${{ needs.test.outputs.branch_coverage }}
          baseBranchCoverage=${{ needs.test-base.outputs.branch_coverage }}
          if [ 1 -eq "$(echo "$prBranchCoverage < $baseBranchCoverage" | bc)" ]; then
            echo "message=Test branch coverage has decreased from $baseBranchCoverage% to $prBranchCoverage%. Please add tests for your changes!" >> $GITHUB_OUTPUT
          elif [ 1 -eq "$(echo "$prBranchCoverage > $baseBranchCoverage" | bc)" ]; then
            echo "message=Test branch coverage has increased from $baseBranchCoverage% to $prBranchCoverage%." >> $GITHUB_OUTPUT
          else
            echo "message=Test branch coverage has not changed ($prBranchCoverage%)." >> $GITHUB_OUTPUT
          fi
      - name: Create comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            ${{ steps.compare-line.outputs.message }}
            ${{ steps.compare-branch.outputs.message }}
            See the full summary in the [test output](https://github.com/tylertechgraves/stopwatch-manager/actions/runs/${{ github.run_id }}) and run `make test-coverage-html` when testing locally.
